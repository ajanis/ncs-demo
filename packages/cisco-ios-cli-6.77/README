cisco-ios NED README


--------------------

1. Introduction
---------------

   This document describes - cisco-ios - the NED for Cisco devices
   running IOS Classic or XE. It supports all devices (Catalyst, ISR,
   NCS etc) as long as they are running IOS. Note: For 'IOS XR' please
   use the cisco-iosxr NED.

   The NED connects to the device CLI using either SSH or
   Telnet. Support for accessing device via a proxy is also available.

   Configuration is done by sending native CLI commands in a
   transaction to the device through the communication channel. If a
   single command fails, the whole transaction is aborted and reverted.

   If you suspect a bug in the NED, please enable raw tracing and
   re-run the failing transaction, starting with a sync-from. Finally,
   file a ticket and attach the raw trace.


2. Getting started
------------------

   Set up the environment in $DIR, change DIR to something suitable

     > tar xvzf ned-cisco-ios.tgz
     > mv ned-cisco-ios $NCS_DIR/packages/neds/

     > export DIR=/tmp/ncs-cisco-ios
     > ncs-setup --ned-package $NCS_DIR/packages/neds/cisco-ios --dest $DIR
     > cd $DIR

   Start ncs:
     > ncs

   Start NCS CLI:
     > ncs_cli -C -u admin


3. Configure device in NCS
--------------------------

   In the NCS CLI configure the device. Enter configuration mode:
     # configure

   Set the required configurables, address, remote user data including
   remote secondary password, if needed:
     # devices device iosdev address <device address>
     # devices device iosdev device-type cli ned-id cisco-ios
     # devices device iosdev state admin-state unlocked

   Set port and protocol:
     # devices device iosdev port <typically 22 or 23>
     # devices device iosdev device-type cli protocol <telnet or ssh>

   Set authgroup:
     # devices authgroups group auth-groupname umap admin remote-name <login username>
     # devices authgroups group auth-groupname umap admin remote-password <login password>
     # devices authgroups group auth-groupname umap admin remote-secondary-password <the 'enable' password>
     # devices device iosdev authgroup auth-groupname
     # commit

   Enable debug and raw trace:

     Make the NED dump all CLI messages sent to/from the Cisco device
     # devices global-settings trace raw
     # commit

     Make the NED print debug log messages
     # java-vm java-logging logger com.tailf.packages.ned.ios level level-debug
     # commit

   Exit configure mode:
     # exit

   Try to connect to the device:
     # devices device iosdev connect

   Read the configuration from the device:
     # devices device iosdev sync-from

   Look at the configuration:
     # show running-config devices device iosdev


4. Sample Device Configuration
------------------------------

   For instance, create a second Loopback interface that is down:

   admin@ncs(config)# devices device iosdev config
   admin@ncs(config-config)# interface Loopback 1
   admin@ncs(config-if)# ip address 128.0.0.1 255.0.0.0
   admin@ncs(config-if)# shutdown

   See what you are about to commit:

   admin@ncs(config-if)# commit dry-run outformat native
   device iosdev
     interface Loopback1
      ip address 128.0.0.1 255.0.0.0
      shutdown
     exit

   Commit new configuration in a transaction:

   admin@ncs(config-if)# commit
   Commit complete.

   Verify that NCS is in-sync with the device:

    admin@ncs(config-if)# devices device iosdev check-sync
    result in-sync

   Compare configuration between device and NCS:

    admin@ncs(config-if)# devices device iosdev compare-config
    admin@ncs(config-if)#

   Note: if no diff is shown, supported config is the same in
         NCS as on the device.


5. Configure the NED using ned-settings
---------------------------------------

  The NED behaviour can be configured using ned-settings, located in
  the cisco-ios container in three different places:

  global
    /ncs:devices/global-settings/ned-settings/cisco-ios/
  profile
    /ncs:devices/ncs:profiles/profile:cisco-ios/ned-settings/cisco-ios/
  device
    /ncs:/device/devices/device:<name>/ned-settings/cisco-ios/

  Profiles setting overrides global-settings and device settings
  override profile settings, hence the narrowest scope of the setting
  is used by the device.

  If you change a ned-setting you must reconnect to the device, i.e.
  disconnect and connect in order for the new setting to take effect.

  See the following sections for information about various ned-settings.


6. ned-settings cisco-ios
-------------------------

  The following top level ned-settings can be modified:

  - log-verbose true|false(default)

    This setting can be used to enable additional debug output in the
    NED trace. This is extremely usable for the NED support team when
    trying to find possible bugs, or understand a device better.


  - extended-parser turbo-mode|turbo-xml-mode|robust-mode|auto [default]

    This setting can be used with NSO-4.4.1 or newer to optimize
    sync-from and compare-config. Set to auto|turbo-[xml-]mode to enable.
    robust-mode filters unmodeled config before passing to NSO.
    Default: auto.


6.1. ned-settings cisco-ios connection
----------------------------------------

  This section lists the connection ned-settings used when connecting
  to the device:

  - connection connector <name>.json

    Change the default connector used for this device, profile or
    global setup. The new connector must be located in the
    src/metadata folder in the NED package, where also the README
    file is located for more information on configuring connectors.


  - connection number-of-retries <retries>

    Configured the maximum number of extra retries the NED will try to
    connect to the device before giving up. Range 0-255. Default 1.


  - connection time-between-retry <seconds>

    Configure the time in seconds the NED will wait between each
    connect retry. Range 1-255. Default 1.


  - connection send-login-newline true|false

    This ned-setting is used to send an initial newline in the login
    phase, in order to wake the device. This can be usable, for
    example, if the banner config on the device causes the login code
    to miss a prompt. Default false.


  - connection prompt-timeout <millisec>

    This ned-setting can be used to configure a timeout in the
    connection process which can be used to wake the device if the
    device requires additional newlines to be sent before proceeding.
    Range 0|1000-1000000. Default 0 (turned off).


  - connection terminal width <num> (default 200)
    connection terminal height <num> (default 24)

    These ned-settings can be used to change the default terminal
    width and height reported by SSH/TELNET upon connect.
    Defaults are width 200 and height 24.


6.2. ned-settings cisco-ios read
--------------------------------

  This section lists the read ned-settings used with sync-from and
  check-sync:

  - read transaction-id-method <enum>

    The method to use by the NED for calculating transaction ID is a
    configurable option. The default method is quite slow since it
    uses output of show running-config and a software calculated
    MD5. The advantage though is that it does not change even if the
    device  reboots. Another advantage is that it works on all
    platforms. If you do not care about the transaction id changing if
    the device reboots you may increase performance significantly by
    changing the method the transaction id is calculated.

    Five different methods are supported:

    config-hash         - Calculate MD5 on a snapshot of the entire running
                          config for calculation. (Default)

    last-config-change  - Use the 'Last configuration change' timestamp
                          in running config only (WARNING: changed at reboot)

    config-id           - Use the 'show configuration id' command to determine
                          if config changed. (WARNING: changed at reboot)

    config-history      - Use the 'show configuration history' command to
                          determine if config changed. (WARNING: changed at reboot)

    config-hash-cached  - Same as config-hash except that transaction
                          id method will reuse the last unmodified
                          config from show (sync-from).

    config-hash-modeled - Same as config-hash except transaction id is
                          only calculated on modeled config.

    Note: 'show config id|history' is not supported on some platforms,
    e.g. 3550, cat4500, cat6500 etc. But if the option is not supported,
    you will get to know this by use of an exception.


  - read show-running-method <string>

    Normally the NED uses "show running-config" to show configuration.
    This can be changed using this ned-setting, for example:

    devices device cat4500-1 ned-settings cisco-ios read show-running-method
                                          "show running-config full"

    Note: For devices which has enabled scp server, this setting can
    be set to "scp-transfer" to use SCP to retrieve
    running-config. This is slower for small config files but
    potentially faster for large ones. To debug, run from linux:
    $ scp -v <username>@<devname>:running-config .

    WARNING: Issues created by use of "show run all|full"
             ARE NOT SUPPORTED due to IOS CLI limitations.
             Please only use this setting for short testing.

  - read snmp-server-user-defaults <id> [regexp] <auth-password> <priv-password>

    Use this ned-setting to change the default snmp-server user
    passwords to avoid static configration of unknown passwords.
    See tailf-ned-cisco-ios-meta.yang ned-setting YANG for details.


6.2.1 ned-settings cisco-ios read replace-config
------------------------------------------------

  - read replace-config <id> <regexp> [replacement] [when]

    The replace-config list ned-setting can be used to replace or
    filter out config line(s) upon reading from device, i.e. both in a
    sync-from and a config-hash transaction id.

    Apart from the list id, the setting takes one mandatory leaf
    (regex) and two optional (replacement and when):

    regexp
       The regular expression (DOTALL) to which the config is to be
       matched.
    replacement
       The string which would replace all found matches. May use
       groups from regexp. Leave unset for filtering.
    when
       Used to specify if the replacement/filtering should only be
       performed when syncing/comparing config or only when
       calculating transaction id. The default (leave unset) is both.

    An example, on one device the config line "no service-routing
    capabilities-manager" kept coming and going due to a service on the
    device. In order to not alter the transaction-id when using
    config-hash the line has to be filtered out. This can be done with
    the following ned-setting:

    devices device asr1002-1 ned-settings cisco-ios read replace-config filter-sr-cap regexp "\nno service-routing capabilities-manager"

      or for all IOS devices if you want:

    devices global-settings ned-settings cisco-ios read replace-config filter-sr-cap regexp "\nno service-routing capabilities-manager"

    The above ned-setting will result in the line being stripped if available.
    Note how the replacement string is left empty when filtering. This
    means replacing with "". Also note how "\n" is needed to identify
    the line starts on a new line as well as needed to strip it and
    avoid a whitespace diff.

    The NED trace (in raw mode) will show the ned-setting in use when
    doing a check-sync or sync-from:

     -- transformed: replaced "no service-routing capabilities-manager\r\n" with ""

    Finally, a word of warning, if you replace or filter out config
    from the show running-config, you most likely will have
    difficulties modifying this config.


6.2.2 ned-settings cisco-ios read inject-config
6.2.3 ned-settings cisco-ios read inject-interface config
---------------------------------------------------------

  - read inject-config <id> <regexp> <config> <where>
  - read inject-interface-config <id> <interface> <config>

    The inject-config and inject-interface-config ned-settings can also
    be used to inject config lines when reading from device,
    e.g. parsing show running-config. The injected config is injected
    first or last, or as specified by a DOTALL regexp expression. It
    can also be configured to be inserted after/before each match.

    The inject config settings were implemented to solve cases where
    IOS behaves inconsistently, e.g. hidden defaults which vary from
    device to device, even vary between interfaces types.

    An example:

    interface / logging event link-status is usually shown
    as "no logging event link-status" when not set and hidden when
    set. But on a cat4500 it is the reverse: it is shown when set and
    hidden when not set. To solve this one can configure as below:

    To inject 'logging event link-status' on all interfaces (works for
    most device types, hence put globally):

     devices global-settings ned-settings cisco-ios read inject-interface-config \
        1 interface ".*" config "logging event link-status"

    To inject 'no logging event link-status' on device cat4500 only
    (after the global setting, hence overriding it):

     devices device cat4500 ned-settings cisco-ios read inject-interface-config \
        1 interface ".*" config "no logging event link-status"

    The two config entries above will solve compare diff problems with
    logging event link-status.

    Another example of config injection use is switchport, which may be
    need to be injected on some devices types. See section 7.

    Here is an example of injecting global config, which will
    be injected at the top level of show running-config:

    devices global-settings ned-settings cisco-ios read inject-config glob
    config "hostname DEFAULT-HOST-NAME"

    Global inject config also take an optional 'regexp' string which can
    be used to inject config line(s). The inject can be specified with
    'where' leaf, eight values are supported:

      before-each
       inject command before each matching <config-line>
      before-first
       inject command before first matching <config-line>
      after-each
       inject command after each matching <config-line>
      after-last
       inject command after last matching <config-line>
      before-topmode
       inject command before regex <config-line> topmode
      after-topmode
       inject command after regex <config-line> topmode
      first
       inject command first if regex <config-line> matches or is unset
      last
       inject command last if regex <config-line> matches or is unset


    Here is an example how to inject default-metric after each found
    router eigrp on a cat4500:

    devices device cat4500-1 ned-settings cisco-ios read inject-config eigrp \
       regexp "router eigrp (\\d+)" config " default-metric $1 100 255 1 1500"

    Up to 9 groups (expr) are supported in the regexp, e.g. $1 - $9.

    Note that in order for the new inject setting to take effect, you
    must disconnect and disconnect. A sync-from is also needed to
    populate NCS/NSO CDB with newly configured injection config.


6.3. ned-settings cisco-ios write
---------------------------------

  This section lists the write ned-settings used with commit:

  - write memory-setting <enum>

    This ned-setting is used to configure when/if an applied
    configuration is saved to the device. Three values are supported:

    on-commit     - Save configuration immediately after the config has been
                    successfully applied on the device. If an error occurs when
                    saving the whole running config will be rolled back (default).

    on-persist    - Save configuration during the NED persist handler. Called
                    after the config has been successfully applied and commited
                    If an error occurs when saving an alarm will be triggered.
                    No rollback of the running config is done.

    disabled      - Disable saving the applied config to persistent memory.

    Default: on-commit


  - write memory-method <string>

    This setting is used to change how the NED writes config to a device.
    The default is "write memory".


  - write config-output-max-retries <retries>

    This ned-setting is used to configure the maximum number of
    retries when sending config command to device. For example,
    commands like deleting a rd in an ip vrf may sometimes take up to
    70 seconds. The NED will then retry the (next) command once per
    second until the command succeeds or this setting is reached.
    Default 180.


  - write config-output-retry-interval <milliseconds>

    The number of milliseconds between each retry of config command.
    Default 1000.


  - write number-of-lines-to-send-in-chunk 1-1000 (default 100)

    Some config may be sent in chunks to the device instead of line by line.
    A higher number normally results in better performance but may also have
    a negative impact on the error handling. Default is 100, maximum 1000.
    NOTE: If you get an 'Internal ERROR: retry-command', set this setting to
    1 and report the config line which triggered the exception.


  - write device-output-delay <millisec>

    This ned-setting is used to configure a delay in milliseconds
    after each config command has been sent to the device. This can be
    used to limit the bandwidth or prevent congestion on the
    device. Default 0.


  - write transfer-via-file true|false (default)

    This ned-setting is used with NETSIM device only to optimize the
    file transfer by use of a temporary file located in the /tmp
    directory. Do not enable unless you got a writeable /tmp
    directory.


  - write apply-reboot-timer 0|2|3|4|9|19|29|39|49|59

    This ned-setting is used with development mainly and can be
    useful if you happen to commit config which disconnects your
    access to the device. If set, the NED will set the reboot (reload)
    timer before sending config to the device, and cancel it
    afterwards; making the device automatically reboot if you loose
    connection to the device. Default is 0 (disabled).


  - cisco-ios write config-revert-timer <minutes>

    Set this ned-setting to a non-zero value to enable use of built-in
    'config t revert timer idle <minutes>' feature in IOS, triggering
    a rollback to last archived config with loss of connection after
    <minutes>. The NED will be notified of a loss of connection using
    the read-timeout timer. For best result, set device read-timeout
    to a value close to this timer or the device may rollback unexpectedly.
    Finally, the feature is temporarily disabled when 'archive' config
    is included in the commit, to allow user to initialize the device
    before use.


6.3.1. ned-settings cisco-ios write config-warning
--------------------------------------------------

  This section describes how device output (warnings/errors) can be filtered.

  - write config-warning <regex>

    After having sent a config command to the device the NED will treat
    any text reply as an error and abort the transaction. The config
    command that caused the failed transaction will be shown together
    with the error message returned by the device. Sometimes the text
    message is not an actual error. It could be a warning that should be
    ignored. The NED has a static list of known warnings, an example:

            // general
            "warning: \\S+.*",
            "%.?note:",
            "info:",
            "aaa: warning",
            ".*success",
            "enter text message",
            "hqm_tablemap_inform: class_remove error",

           etc etc.

    If you stumble upon a warning not already in the NED, which is quite
    likely due to the large number of warnings, you can configure the
    NED to ignore them using this ned-setting.

    The list key is a regular expression with a warning that should be
    ignored.

    For example, to add a new warning exception:

     admin@ncs(config)# devices global-settings ned-settings
         cisco-ios write config-warning "Address .* may not be up"
     admin@ncs(config)# commit
     Commit complete.
     admin@ncs(config)# devices device iosdev disconnect
     admin@ncs(config)# devices device iosdev connect
     result true
     info (admin) Connected to iosdev

    Note that in order for the warning exception to take effect, you
    must disconnect and connect again, to re-read ned-settings.


6.3.2. ned-settings cisco-ios write inject-command
--------------------------------------------------

  - write inject-command <id> <config-line> <command> <where>

    The cisco-ios write inject-command ned-setting can be used to inject
    command line(s) in a transaction. This can be needed, for example,
    when deleting crypto config which requires a clear command to be
    run before delete.

    The ned-settings is configured with:

    id
     User defined name for this ned-setting used to identify the list entry

    config-line
     The config line(s) where command should be injected (DOTALL regexp)

    command
     The command (or config) to inject after|before config-line.
     Prefix with 'do ' if you want to run exec command in config mode.
     Prefix with 'exec ' if you want to run exec command in exec mode.

    'where', eight values are supported:
      before-each
       inject command before each matching <config-line>
      before-first
       inject command before first matching <config-line>
      after-each
       inject command after each matching <config-line>
      after-last
       inject command after last matching <config-line>
      before-topmode
       inject command before regex <config-line> topmode
      after-topmode
       inject command after regex <config-line> topmode
      first
       inject command first if regex <config-line> matches or is unset
      last
       inject command last if regex <config-line> matches or is unset

    An example (of a previously hard coded inject case):

     devices global-settings ned-settings cisco-ios write inject-command C1 config-line
      "no crypto ikev2 keyring \\S+" command "do clear crypto session" before-first
     devices global-settings ned-settings cisco-ios write inject-command C2 config-line
      "no crypto ikev2 keyring \\S+" command "do clear crypto ikev2 sa fast" before-first

    The above inject command configs will cause a delete of ikev2 keyring to
    look like this:

     do clear crypto session
     do clear crypto ikev2 sa fast
     no crypto ikev2 keyring XXX

    $i (where i is value from 1 to 9) can also be used to inject
    matches values from the config line. For example:

     devices global-settings ned-settings cisco-ios write inject-command C2 config-line
      "no interface Tunnel(\\d+)" command "do clear dmvpn session interface Tunnel $1 static" before-first

    with a deletion of interface Tunnel100 results in:

     !do clear dmvpn session interface Tunnel 100 static
     no interface Tunnel100

    Hence, $1 is replaced with the first group value from the config line,
    which is (\\d+).


6.3.3. ned-settings cisco-ios write replace-commit
--------------------------------------------------

  - write replace-commit <id> <regexp> <replacement>

    The write replace-commit list ned-setting can be used to replace or
    filter out config line(s) upon writing to device.

    Apart from the list id, the setting takes one mandatory leaf and
    one optional:
     regexp
       The regular expression (DOTALL) to which the config is to be
       matched.
     replacement
       The string which would replace all found matches. May use
       groups from regexp. Leave unset for filtering.

    The setting works much like String.replaceAll, i.e. it replaces
    all matches, can use regexp catch groups etc.


6.3.4. ned-settings cisco-ios write inject-answer
-------------------------------------------------

  - write inject-answer <id> <question> <answer> <ml-question>

    Some config commands may prompt the CLI for a password, or answer to a
    question. The NED will automatically answer Y(ES) to all such
    standard questions, assuming the config should take effect.

    Some questions though, like password prompts, the NED will not know
    the answer to. In such cases, the NED must be configured with the
    correct answer(s) to a question using the write inject-answer
    ned-setting list.

    The ned-settings is configured with:

    question
      Last line of the device question, regular expression

    answer
      Answer(s) to device question. Separate multiple answers and end
      with \n.

    ml-question
      Multi-line question, DOTALL regular expression [optional]

    For example, when enabling a pki server config with "no shutdown",
    the user must submit a password (twice) the first time. The question
    from the device will look like this:

    %Some server settings cannot be changed after CA certificate generation.
    % Please enter a passphrase to protect the private key
    % or type Return to exit
    Password:

    The password must be submitted twice, hence a second question from
    the device will show once the password is entered the first time:

    Re-enter password:

    Both questions, prompting for the password,  may be answers with a
    single inject-answer entry (note the double \n below):

    devices device <iosdev> ned-settings cisco-ios write inject-answer A1
               question "\\APassword:" answer "cisco123\ncisco123\n"

    If there are identical password prompts which require different
    passwords, use the ml-question to specify which entry should be used
    for which, e.g.:

    devices device <iosdev> ned-settings cisco-ios write inject-answer A1
               question "\\APassword:" answer "cisco123\ncisco123\n"
               ml-question "changed after CA certificate generation"


6.3.5. ned-settings cisco-ios write config-archive
--------------------------------------------------

  - write config-archive <id> <disabled> <type> <directory> <filename>
    <remote-user> <remote-password> <max-files>

    This ned-setting is used to configure an archive entry used by the
    NED to backup config in persist phase.

    See tailf-ned-cisco-ios-meta.yang write config-archive
    descriptions for details.


6.3.6. ned-settings cisco-ios write config-dependency
-----------------------------------------------------

  - write config-dependency <id> <mode> <move> <action> <stay>

    This ned-setting can be used to add dynamic dependency rules to
    the NED before being permanently fixed in the NED. This can be
    useful if a dependency bug is found and you do not want to upgrade
    the NED or are in a hurry for the fix.

    Apart from the list id, each ned-setting list entry is configured with:

    mode
     Regex specifying config mode where the rule is checked, don't set
     for top-mode.

    move
     Regex specifying line(s) to move.

    action
     Where to move the line(s). Can be set to before|after|last|first.

    stay
     Regex specifying where 'move' lines will be moved with
     before|after action.


6.4. ned-settings cisco-ios auto
--------------------------------

  This section lists the auto ned-settings:

  - auto vrf-forwarding-restore false|true(default)

    This setting can be used to disable the NED automatic behaviour or
    restoring the interface addresses on the device when vrf is
    changed (deleted or set) on an interface. Default true.


  - auto ip-vrf-rd-restore false|true(default)

    This setting can be used to disable the NED automatic behaviour or
    restoring the route-targets on the device when rd is changed in an
    ip vrf. Default true.


  - auto ip-community-list-repopulate true|false(default)

    This setting can be used to restore the ip community-list after a
    delete of an individual entry, e.g. for a 3550 device. Default false.


  - auto if-switchport-sp-patch true|false(default)

    Fix me3600 problem with switchport clearing service-policy and
    then bugging out. Default false.


  - auto if-address-delete-patch false|true(default)

    Pre-inject delete of interface addresses trying to solve complex
    dependency issues. Default true.


  - auto bgp-nbr-password-patch false|true(default)

    Send a dummy password reset when setting router bgp neighbor
    password or sometimes IOS will not be able to set the
    password. Default true.


  - auto interface-switchport-status true|false(default)

    This ned-setting is used to auto inject 'switchport' or 'no
    switchport' when reading Ethernet or Port-channel switchport
    status. If enabled, the NED will execute a "show int <interface>
    switchport" to determine if switchport is enabled or not on the device.

    WARNING: Enabling this option downgrades performance. For optimal
    performance, see section 7 "Fixing switchport issues ..".


  - auto compress-spanning-tree-vlan true|false(default)

    Set to true if want the NED to compress delete|create of
    'spanning-tree vlan'.


  - auto use-ip-mroute-cache-distributed true|false(default)

    Use ip mroute-cache distribute instead of ip mroute-cache.
    Note: cat3560/3750 allow 'ip mroute-cache distributed'
          cat4506 allows 'ip mroute-cache'
          Both just shows 'ip mroute-cache' in show running-config.


  - auto cdp-run true|false(default)

    Use 'show cdp' to inject '[no] cdp run' in config if unknown.
    Default false.


  - auto interface-range-write true|false(default)

    Enable use of 'interface range' config command when modifying
    multiple existing interfaces with the same sub-mode config.
    Notice: for some obscure reason IOS does not allow service
    instance to be modified with interface range command, hence
    interfaces with such config modifications are excluded from this
    feature.


6.5. ned-settings cisco-ios api
-------------------------------

  This section lists the api ned-settings:

  - api police-format <enum>

    There are a number of different formats used among IOS devices
    for police configurations.

    The NED usually is able to auto detect the correct format to use.
    However, in some cases it is necessary to configure this manually.
    For instance when connecting the NED to a new type of IOS device.

    Five different settings are possible:

    auto      - Let the NED probe the device for the correct format (default)

    bpsflat   - police <bps> bps <byte> byte ACTIONS

    cirflat   - police cir <bps> [[bc <burst-normal>] [be <burst-max>]][pir <bps> [be <burst-bytes>]] ACTIONS

    cirmode   - police cir <bps> [[bc <burst-normal>] [be <burst-max>]][pir <bps> [be <burst-bytes>]]
                 ACTIONS

    numflat   - police <bps> <burst> exceed-action {drop | policed-dscp-transmit}]


  - api new-ip-access-list true|false(default)

    This ned-setting is used to switch to the new improved 'ip access'
    YANG API which orders access-list entries on the sequence number
    instead of the rule line. See tailf-ned-cisco-ios.yang for syntax.
    Default false.


  - api new-snmp-server-host true|false(default)

    This ned-setting is used to switch to the new improved 'snmp-server host'
    YANG API which allows multiple community strings. See YANG for syntax.
    NOTE: New api requires 'traps' or 'informs' due to YANG limitations.
    Default false.


  - api snmp-server-enable-all-traps <value>

    Set to non-zero value to treat all 'snmp-server enable traps' as one 'all-traps'
    leaf i.e. 'snmp-server enable all-traps' instead of individual ones in a list.
    Set to negative or positive value, representing two different variants:
     (1) set to a positive value for minimum amount of traps on device
     (2) set to a negative value for maximum missing, i.e. -1 = no missing traps
    Hence, if the above condition is met, the all-traps leaf is set in show().
    Default 0.


  - api aaa-accounting-mode-format true|false(default)

    Enable the newer aaa accounting mode format. Set to automatically
    transform output of aaa accounting to the newer mode format syntax.
    Default false.


  - api expanded-line-vty-format true|false(default)

    Set this ned-setting to true to support individual editing of
    'line vty <start> <end>' entries in show running-config. This will
    fix all issues with overlapping line vty entries in show running.
    Note: when this ned-setting is set to true, then the dual-key line vty
          list is disabled and only the 'vty-single-conf' line is used.
    Default false.


  - api pretty-line-vty-format true|false(default)

    Set this ned-setting to true to format commit for pretty print in
    line vty 'show run' on device.  More specifically, it will extract
    identical line vty passwords and commit in a single range to avoid
    the device encrypting them with different IV's.
    Default false.


  - api unordered-ip-access-list-regex <regex>

    Specify which access-list entries should be stored in unordered
    list. To use:

     1) - Configure a regex (excluding braccets) specifying which lists should
          should reside in the unordered extended list, e.g.:
          ned-settings cisco-ios api unordered-ip-access-list-regex "UNORDERED.+"
          Note: The NED will add the unordered keyword if list matches the regex
                when reading from the device.
     2) - Configure the accesss-list in ip/access-list/unordered list
          Note: when NED commits the list, it will strip the unordered keyword.


  - api access-list-resequence true|false(default)

    This ned-setting is used to switch to the third method of configuring
    ip access-list extended, allowing for moving or inserting new entries
    without removing the current entries like the default method must do.

    Make sure the device does not have 'ip access-list persistent' set.
    Do not use access-list sequence numbers in NSO (or on the device). The NED
     will dynamically use the sequence numbers when inserting/moving access-list
     entries by starting of with a 'ip access-list resequence' command.
    To understand the new YANG model, set the access-list(s) on the device and
     sync-from to NSO, and/or grep the YANG file for 'resequence'.
    NOTES: - remark entries are not supported due to IOS does not number them.
           - ipv6 is not supported due to lack of ipv6 resequence command.
           - standard ip access-list not supported due to device not ordering
             the lists using the sequence number, entries always added last.


  - api acl-resequence-range <1-2147483647>

    Change the ip access-list resequence start and interval values
    used with 'api access-list-resequence' ned-setting.
    Default 1000.


  - api new-mls-qos true|false(default)

    Enable this ned-setting to support duplicate values in 'mls qos map cos-dscp'
    configuration.
    Default false.


  - api ios-common true|false(default)

    Enable this ned-setting to unify some of IOS API discrepancies. The NED
    will auto-correct differences when reading from device. In order to avoid
    configuration diff, you must only use ONE API in the NED.

    Currently affected API's are:

    'logging *' and 'logging host *'     - Use 'logging *' list only.


  WARNING: Changing the above ned-settings will most likely affect the YANG model.


6.6. ned-settings cisco-ios live-status
---------------------------------------

  This section lists the live-status ned-settings:

  - live-status time-to-live <seconds>

    This ned-setting is used to configure the time to live value in
<    seconds for data fetched through the live-status hooks.
    The default value is 50 seconds.


  - live-status exec-done-pattern <regexp>

    This ned-setting can be used when the exec command does not end with
    a device prompt. If the regexp is matched, the NED will return all
    text up to and including this regexp. The default setting is set to
    the output of the "issu runversion" command:
      "(Initiating active RP failover)|(Target RP will now reload)"


  - live-status template-root <directory path>

    This is ned-setting is used to debug GILI templates under
    development. Set to an external directory where you store your
    GILI templates (normally under <ned>/src/gili. The advantage
    of an external directory is (1) you do not have to re-build the
    package each time you change a template and (2) templates in
    external directory are never cached by the NED, hence can be
    modified while testing in ncs_cli.


  - cisco-ios live-status always-show-exec-command true|false(default)

    Normally sent command is only shown if multiple commands are sent
    using ';' delimiter in 'live-status exec any' action. But if this
    setting is set to true, single commands are also shown.
    Default false.


  - cisco-ios live-status exec-strict-prompt <regex>

    This ned-setting can be used to enable to enable stricter prompt
    matching for 'live-status exec any' commands. Setting it to include
    %p will make the NED send an initial newline to determine the device
    prompt, there after use that exact prompt in the following command(s).
    Default false.


  - live-status auto-prompts <id> <question> <answer>

    See section 8 for information on this ned-setting.


6.7. ned-settings cisco-ios deprecated
--------------------------------------

  This section lists (some of) the deprecated ned-settings:

  - deprecated cached-show-enable version false|true(default)
    cisco-ios deprecated cached-show-enable inventory false|true(default)

    These ned-settings are used to inject settings of some show commands
    into the config, when reading from device. The following show
    commands have some cached info:

    show version
    show inventory

    The injected 'config' can be usable in service code to check
    version, model etc. The values are injected under the
    /ios:cached-show container.

    Example of injected config:

    cached-show version version 15.4(3)S5
    cached-show version model ASR1002-X
    cached-show version license level advipservices
    cached-show version license type Permanent
    cached-show inventory name "Chassis" sn FOX1921GEWS
    cached-show inventory name "Power Supply Module 0" sn ART1915V06N
    cached-show inventory name "Power Supply Module 1" sn ART1915V06D
    cached-show inventory name "module 0"
    cached-show inventory name "SPA subslot 0/0"
    cached-show inventory name "subslot 0/0 transceiver 0" sn FNS1037H7J4
    cached-show inventory name "module R0" sn JAE192407EZ
    cached-show inventory name "module F0"

    NOTE: Obviously the output is only cached when reading, hence this
    is NOT config, and can not be used to change the above values.


6.7. ned-settings cisco-ios proxy
---------------------------------

  See sections 10, 11 and 12 for information on proxy ned-settings
  used to connect via a jumphost, terminal server or "exec" proxy,
  i.e. executing a command/script to connect to device.


7. Fixing switchport issues depending on device and interface type
-------------------------------------------------------------------

  There are a two main formats used among IOS devices for switchport
  configurations. Then there is also some devices which do not
  support the switchport config on some interfaces, or all.

  By default the NED injects 'no switchport' first in all
  Port-channel and Ethernet interfaces in order to avoid a
  compare-config diff. This is same as a global config inject rule:

  !devices global-settings ned-settings cisco-ios read inject-interface-config spg interface "Ethernet|Port-channel" config "no switchport"

  For device or interface types which hide 'switchport' when enabled
  (but still no switchport setting set) a 'switchport' must be
  injected to avoid a diff. The following are some identified
  examples:

  devices device me3400 ned-settings cisco-ios read inject-interface-config spd interface "Ethernet|Port-channel" config "switchport"
  devices device cat3750 ned-settings cisco-ios read inject-interface-config spd interface "Ethernet|Port-channel" config "switchport"
  devices device me3800 ned-settings cisco-ios read inject-interface-config spd interface "Ethernet|Port-channel" config "switchport"

  Note that in order for the new switchport setting to take effect, you
  must disconnect and disconnect. A sync-from may also be needed to
  populate NCS/NSO CDB with the injected config.

  Finally, there is also a new ned-setting 'cisco-ios auto
  interface-switchport-status' which can be used instead of the
  described inject settings above. Using this ned-setting, the ned will
  check the interface type using "show <ifname> switchport" and auto
  inject 'switchport' or 'no switchport'. The only drawback to this is
  a somewhat reduced performance due to the additional show command
  each time interface is read.


8. How to execute native operational or config command on device
----------------------------------------------------------------

   The NED has support for all exec commands in config mode. They can
   be accessed using the 'exec' prefix. For example:

    admin@ncs(config)# devices device asr1002-1 config exec
                       "default interface GigabitEthernet0/0/0"
    result
    > default interface GigabitEthernet0/0/0
    Interface GigabitEthernet0/0/0 set to default configuration
    Router(config)#

   The NED also has support for all operational Cisco IOS commands
   by use of the 'devices device live-status exec any' action. Or,
   if you do not want to log|trace the command, use the any-hidden.

   For example:

    admin@ncs# devices device iosdev live-status exec any
               "show running-config interface Loopback0"
    result
    Building configuration...

    Current configuration : 42 bytes
    !
    interface Loopback0
     no ip address
    end

   To execute multiple commands, separate them with " ; "
   NOTE: Must be a white space on either side of the comma.
   For example:

    admin@ncs# devices device asr1002-1 live-status exec any
               "show run int Gig0/0/0 ; show run int Gig0/0/1"
    result
    > show run int Gig0/0/0
    Building configuration...

    Current configuration : 71 bytes
    !
    interface GigabitEthernet0/0/0
     no ip address
     negotiation auto
    end

    Router#
    > show run int Gig0/0/1
    Building configuration...

    Current configuration : 112 bytes
    !
    interface GigabitEthernet0/0/1
     no ip address
     standby 1 priority 1
     standby 1 preempt
     negotiation auto
    end

    Router#

   NOTE: To Send CTRL-C send "CTRL-C" or "CTRL-C async" to avoid
         waiting for device output. Also note that you most likely
         will have to extend timeouts to avoid closing the current
         connection and send CTRL-C to a new connection, i.e. CTRL-C
         being ignored

   Generally the command output parsing halts when the NED detects
   an operational or config prompt, however sometimes the command
   requests additional input, 'answer(s)' to questions.

   To respond to device question(s) there are 3 different methods,
   checked in the listed order below:

   [1] the action auto-prompts list, passed in the action
   [2] the ned-settings cisco-ios live-status auto-prompts list
   [3] the command line args "| prompts" option

   IMPORTANT: [3] can be used to override an answer in auto-prompts.

   Read on for details on each method:

   [1] action auto-prompts list

   The auto-prompts list is used to pass answers to questions, to
   exit parsing, reset timeout or ignore output which triggered the
   the built-in question handling. Each list entry contains a question
   (regex format) and an optional answer (text or built-in keyword).

   The following built-in answers are supported:

   <exit>     Halt parsing and return output
   <prompt>   Retrieve the answer from "| prompts" argument(s)
   <timeout>  Reset the read timeout, useful for slow commands
   <ignore>   (or IGNORE) Ignore the output and continue parsing
   <enter>    (or ENTER) Send a newline and continue parsing

   Any other answer value is sent to the device followed by a newline,
   unless the answer is a single letter answer in case which only the
   single character is sent.

   Note: not configuring an answer is the same as setting it to <ignore>

   Here is an example of a command which needs to ignore some output
   which would normally be interpreted as a question due to the colon:

   exec auto-prompts { question "Certificate Request follows[:]" answer
         "<ignore>" } "crypto pki enroll LENNART-TP | prompts yes no"

   Also note the use of method 3, answering yes and no to the remaining
   device questions.


   [2] ned-settings cisco-ios live-status auto-prompts list

   The auto-prompts list works exactly as [1] except that it is
   configured and used for all device commands, i.e. not only for
   this specific action.

   Here are some examples of auto-prompts ned-settings:

   devices global-settings ned-settings cisco-ios live-status auto-prompts Q1 question "System configuration has been modified" answer "no"
   devices global-settings ned-settings cisco-ios live-status auto-prompts Q2 question "Do you really want to remove these keys" answer "yes"
   devices global-settings ned-settings cisco-ios live-status auto-prompts Q3 question "Press RETURN to continue" answer ENTER

   NOTE: Due to backwards compatibility, ned-setting auto-prompts
   questions get ".*" appended to their regex unless ending with
   "$". However, for option [1] the auto-prompt list passed in the
   action, you must add ".*" yourself if this matching behaviour is
   desired.


   [3] "| prompts"

   "| prompts" is passed in the command args string and is used to
   submit answer(s) to the device without a matching question pattern.
   IMPORTANT: It can also be used to override answer(s) configured in
   auto-prompts list, unless the auto-prompts contains <exit> or
   <timeout>, which are always handled first.

   One or more answers can be submitted following this syntax:

       | prompts <answer 1> .. [answer N]

   For example:

   devices device iosdev live-status exec any "reload | prompts no yes"

   The following output of the device triggers the NED to look for the
   answer in | prompts arguments:

       ":\\s*$"
       "\\][\\?]?\\s*$"

   In other words, the above two patterns (questions) have a built-in
   <prompt> for an answer.

   Additional patterns triggering | prompts may be configured by use
   of auto-lists and setting the answer to <prompt>. This will force
   the user to specify the answer in | prompts.

   The <ignore> or IGNORE keywords can be used to ignore device output
   matching the above and continue parsing. If all output should be
   ignored, i.e. for a show command, '| noprompts' should be used.

   Some final notes on the 'answer' leaf:

   - "ENTER" or <enter> means a carriage return + line feed is sent.

   - "IGNORE", "<ignore>" or unset means the prompt was not a
      question, the device output is ignored and parsing continues.

   - A single letter answer is sent without carriage return + line,
     i.e. "N" will be sent as N only, with no return. If you want a
     return, set "NO" as the answer instead.


9. internal live-status commands
--------------------------------

  There are a number of internal live-status command which may be of
  use when debugging/developing. An internal live-status command is
  executed in ncs_cli like this:

    admin@ncs# devices device <name> live-status exec any <internal command>

  The following internal live-status commands may be of use:

  sync-from-file <file>

    Next sync-from will load the config from the file specified by
    <file> as if the config was synced from a real device. This can
    be useful to test what config is supported if you get output from
    show running-config from e.g. a raw trace.
    Example:
     admin@ncs# devices device netsim-0 live-status exec any sync-from-file /tmp/config.txt
     result
     Next sync-from will use file = /tmp/config.txt
     admin@ncs# devices device netsim-0 sync-from
    Note: Always used a NETSIM device with this setting.


  accept-eula <seconds>

    Use this command to accept all EULA agreements. The <seconds> is
    the maximum number of seconds to wait for the device to output the
    agreement.


  show outformat raw

    Will show the next 'commit dry-run outformat native' unmodified,
    i.e. with no NED transformations done.


  show ned-settings

    Will show all ned-settings for this device


10. When connecting through a proxy using SSH or TELNET
-------------------------------------------------------

  When connecting through a proxy using SSH or TELNET you must use a
  set of ned-settings, all residing under cisco-ios proxy.

  Do as follows to setup to connect to a IOS device that resides
  behind a proxy or terminal server:

   +-----+  A   +-------+   B  +-----+
   | NCS | <--> | proxy | <--> | IOS |
   +-----+      +-------+      +-----+

  Setup connection (A):

   # devices device cisco0 address <proxy address>
   # devices device cisco0 port <proxy port>
   # devices device cisco0 device-type cli protocol <proxy proto - telnet or ssh>
   # devices authgroups group ciscogroup umap admin remote-name <proxy username>
   # devices authgroups group ciscogroup umap admin remote-password <proxy password>
   # devices device cisco0 authgroup ciscogroup

  Setup connection (B):

  Define the type of connection to the device:

   # devices device cisco0 ned-settings cisco-ios proxy remote-connection <ssh|telnet>

  Define login credentials for the device:

   # devices device cisco0 ned-settings cisco-ios proxy remote-name <user name on the IOS device>
   # devices device cisco0 ned-settings cisco-ios proxy remote-password <password on the IOS device>

  (note: instead of configuring remote-name|password 'proxy authgroup' can be configured)

  [optional] Define prompt on proxy server before sending (not required for IOS(XR) proxy):

   # devices device cisco0 ned-settings cisco-ios proxy proxy-prompt <prompt pattern on proxy>

  Define pattern on proxy server after sending telnet/ssh, but before second login:

   # devices device cisco0 ned-settings cisco-ios proxy proxy-prompt2 <prompt pattern on proxy>

  Define address and port of IOS device:

   # devices device cisco0 ned-settings cisco-ios proxy remote-address <address to the IOS device>
   # devices device cisco0 ned-settings cisco-ios proxy remote-port <port used on the IOS device>

  [optional] Modify/extend the default connection command syntax from its default:

   # devices device cisco0 ned-settings cisco-ios proxy remote-command "telnet $address $port /vrf Mgmt-intf"

  Commit configuration and make sure the ned-settings are re-read:

   # commit
   # devices disconnect


11. When connecting to a terminal server
----------------------------------------

  Use cisco-ios proxy remote-connection serial when you are
  connecting to a terminal server. The setting triggers sending of
  extra new-lines to activate the login sequence.

  You also have the option of configuring a menu regexp and answer to
  be able to bypass menu selections.

  You may also need to specify remote-name and remote-password if the
  device has a separate set of login credentials.

  Finally, you may also need to set the cisco-ios connection
  prompt-timeout ned-setting (in milliseconds) to trigger sending of
  more newlines if the login process requires it. The NED will send
  onenewline per timeout until connect-timeout is reached and the the
  login fails.

  Example config for terminal server with 2nd login but no menu:

  devices authgroups group term-dev default-map remote-name 1st-username remote-password 1st-password remote-secondary-password cisco
  devices device term-dev address 1.2.3.4 port 1234
  devices device term-dev authgroup term-dev device-type cli ned-id cisco-ios protocol telnet
  devices device term-dev connect-timeout 30 read-timeout 600 write-timeout 600
  devices device term-dev state admin-state unlocked
  devices device term-dev ned-settings cisco-ios proxy remote-connection serial
  devices device term-dev ned-settings cisco-ios proxy remote-name 2nd-username
  devices device term-dev ned-settings cisco-ios proxy remote-password 2nd-password
  devices device term-dev ned-settings cisco-ios connection prompt-timeout 4000

  Example config for terminal server with menu but no 2nd login:

  devices authgroups group term-dev default-map remote-name 1st-username remote-password 1st-password remote-secondary-password cisco
  devices device term-dev address 1.2.3.4 port 22
  devices device term-dev authgroup term-dev device-type cli ned-id cisco-ios protocol ssh
  devices device term-dev connect-timeout 30 read-timeout 600 write-timeout 600
  devices device term-dev state admin-state unlocked
  devices device term-dev ned-settings cisco-ios proxy remote-connection serial
  devices device term-dev ned-settings cisco-ios connection prompt-timeout 4000
  devices device term-dev ned-settings cisco-ios proxy menu regexp "\\AChoose your option" answer "e\n"
    or a second example:
  devices device term-dev ned-settings cisco-ios proxy menu regexp "\\ASelection:" answer "x\n"


12. Example of how to configure a device with a slave device (EXEC PROXY)
-------------------------------------------------------------------------

  The NED can also support connecting to a slave device, reachable
  only by first connecting to the master device. This setting contains
  a config example of how to achieve that.

  Example config:

  Master device:

  devices device 891w address 10.67.16.59 port 23
  devices device 891w authgroup 891wauth device-type cli ned-id cisco-ios protocol telnet
  devices device 891w connect-timeout 15 read-timeout 60 write-timeout 60
  devices device 891w state admin-state unlocked

  Slave device (accessed through master and proxy, a command run in exec mode):

  devices device ap801 address 10.67.16.59 port 23
  devices device ap801 authgroup 891wauth device-type cli ned-id cisco-ios protocol telnet
  devices device ap801 connect-timeout 15 read-timeout 60 write-timeout 60
  devices device ap801 state admin-state unlocked
  devices device ap801 ned-settings cisco-ios proxy remote-connection exec
  devices device ap801 ned-settings cisco-ios proxy remote-command "service-module wlan-ap 0 session"
  devices device ap801 ned-settings cisco-ios proxy remote-prompt "Open"
  devices device ap801 ned-settings cisco-ios proxy remote-name cisco
  devices device ap801 ned-settings cisco-ios proxy remote-password cisco123
  !devices device ap801 ned-settings cisco-ios proxy remote-secondary-password cisco123


13. Configuring ip access-lists standard|extended
-------------------------------------------------

    Before deciding how to configure 'ip access-list standard|extended'
    you must choose whether to use rule sequence numbers or not. If the
    device shows access-list sequence numbers in 'show run' then you
    must also configure them in NSO CDB or you will get a config diff.

    If you want to configure rules with sequence numbers and the device
    does not show them, you must set 'ip access-list persistent' to
    enable it, and vice versa.

    Also IMPORTANT to mention is that the NED can not auto-correct
    rules once set on the device. Hence, in order to avoid a config
    diff you must always configure the rules exactly as shown on the
    device with 'show running-config. Best and simplest way to learn
    how to configure your rules is to simply set them on the device
    first then sync-from and show them in NSO, in native or XML format.

    Finally, there are four different methods in the NED to configure
    ip access-lists. Read them carefully before choosing which to use,
    they all have different advantages and disadvantages.

    Method #1 - Default

    Use the ios:ip/access-list/standard/std-named-acl{name} or
    ios:ip/access-list/extended/ext-named-acl{name} lists to
    configure ip access-lists. Optional rule sequence number
    is embedded in the rule list multi-word-key leaf. This is the
    default setting and should work for most cases. However, there
    are some drawbacks, one being you cant insert|move rules without
    deleting all previous entries first. The NED will handle this
    automatically for you but it will be costly for large lists.


    Method #2 - New API

    Set 'api new-ip-access-list' ned-setting to true to enable.

    If you use this setting you must configure ip access-list
    standard and extended entries in ios:ip/access-list/filter-list{name}
    You must also have 'ip access-list persistent' configured
    to enable output of sequence numbers in show run on the device.
    The advantage of using this method is that you can insert|move
    individual rules by referencing the rule sequence number key 'seq'.
    However, please make sure to space your sequence numbers to make
    it possible for insertions or you may not be able to insert more.


    Method #3 - Resequence

    Set 'api access-list-resequence' ned-setting to true to enable.

    This method, which unfortunately only works with non-remark IPv4
    'ip access-list extended' rules, is the most flexible method if you
    can use it. The NED will automatically resequence the rules after each
    modification, making it possible to insert rules indefinitely.
    Configure the entries in ios:ip/access-list/resequence/extended{name}
    with this setting. Although you must have 'ip access-list persistent'
    enabled on the device you do not need to configure sequence numbers
    in NSO since they are automatically handled by the NED.


    Method #4 - Unordered

    Set 'api unordered-ip-access-list-regex' to list name regex to enable.

    This is the only method which may be used in combination with the
    other methods since it only affects list entries matching the regex
    name in the ned-setting. The method should be used for access-list
    entries where the order does not matter and/or the device reorders
    the entries after they have been set. To enable, choose a regex which
    matches the names of the unordered entries, and finally, configure
    them in ios:ios/access-list/unordered{name}, which supports both
    standard and extended access-lists, configured in 'type' leaf.


14. NED Secrets - Securing your Secrets
---------------------------------------

    It is best practice to avoid storing your secrets (e.g. passwords and
    shared keys) in plain-text, either on NSO or on the device. In NSO we
    support multiple encrypted datatypes that are encrypted using a local
    key, similarly many devices such as Cisco IOS supports automatically
    encrypting all passwords stored on the device. On Cisco IOS this can
    be enabled using commands like these:

      # key config-key password-encryption SUPERSECRET
      # service password-encryption
      # password encryption aes

    which makes the system automatically encrypt all passwords using
    the key `SUPERSECRET` and show them encrypted in the output of
    `show running`.

    Naturally, for security reasons, NSO in general has no way of
    encrypting/decrypting passwords with the secret key on the
    device. This means that if nothing is done about this we will
    become out of sync once we write secrets to the device. Looking at
    the cisco-ios NED there are over 500 paths that contain such secrets.

    In order to avoid becoming out of sync the NED reads back these elements
    immediately after set and stores the encrypted value(s) in a special
    `secrets` table in oper data. Later on, when config is read from the
    device, the NED replaces all cached encrypted values with their plaintext
    values; effectively avoiding all config diffs in this area. If the values
    are changed on the device, the new encrypted value will not match the
    cached pair and no replacement will take place. This is desired, since out
    of band changes should be detected.

    This handles the device-side encryption, but passwords are still unencrypted
    in NSO. To deal with this we support using NSO-encrypted strings instead of
    plaintext passwords in the NSO data model.

    --- Handling auto-encryption

    Let us say that we have password-encryption on and we want to write a new
    user to our device:

      admin@ncs(config)# devices device ios0 config username newuser password 0 magic
      admin@ncs(config-config)# commit

    this will be automatically encrypted by the device

      Router#show running-config | section usernaname
      username newuser password 6 _Ab[PDCO[fQDJhDfMIciONMedifAAB

    But the secrets management will store this new encrypted value in our `secrets` table:

      admin@ncs# show devices device ios0 ned-settings secrets
      ID                                      ENCRYPTED                         REGEX
      ---------------------------------------------------------------------------------
      ios:username(newuser)/password/secret   6 _Ab[PDCO[fQDJhDfMIciONMedifAAB

      which means that compare-config or sync-from will not show any
      changes and will not result in any updates to CDB". In fact, we can
      still see the unencrypted value in the device tree:

      admin@ncs# show running-config devices device ios0 config username
      devices device ios0
       config
         username admin password 6 S]iVZERdHTgVdf_KVQYOMXQRR^QHM^
         username cisco privilege 15 password 6 "Y]i`\ZegLUiB[EMPYUAKhOBK]VRAAB"
         username newuser password 0 magic
        !
       !

    --- Increasing security with NSO-side encryption

    We have two alternatives, either we can manually encrypt our values using
    one of the NSO-encrypted types (e.g `aes-256-cfb-128-encrypted-string`) and
    set them to the tree, or we can recompile the NED to always encrypt secrets.

    --- Setting encrypted value

    Let us say we know that the NSO-encrypted string
      `$9$T963R76+wgaQuZCtcGC/Nreo75FigP+znmOln8XDFK0=` (`admin`), we
    can then set it in the device tree as normal

      admin@ncs(config)# devices device ios0 config username newuser2 password 0 $9$T963R76+wgaQuZCtcGC/Nreo75FigP+znmOln8XDFK0=
      admin@ncs(config-config)# commit

    when commiting this value it will be decrypted and the plaintext will be written to the device.
    Unlike the previous example the plaintext is not visible in the device tree:

      admin@ncs# show running-config devices device ios0 config username
      devices device ios0
       config
         username admin password 6 S]iVZERdHTgVdf_KVQYOMXQRR^QHM^
         username cisco privilege 15 password 6 "Y]i`\ZegLUiB[EMPYUAKhOBK]VRAAB"
         username newuser password 0 magic
         username newuser2 password 0 $9$T963R76+wgaQuZCtcGC/Nreo75FigP+znmOln8XDFK0=
       !
     !

    On the device side this plaintext value is of course encrypted
    with the device key, and just as before we store it in our
    `secrets` table:

    admin@ncs# show devices device ios0 ned-settings secrets
    ID                                      ENCRYPTED                         REGEX
    ---------------------------------------------------------------------------------
    ios:username(newuser)/password/secret   6 _Ab[PDCO[fQDJhDfMIciONMedifAAB
    ios:username(newuser2)/password/secret  6 XTXfOVUcYDZKd`FBH\S]XEJ_FcIAAB

    We can see that this corresponds to the value set on the device:

      Router#show running-config | section username
      username admin password 6 S]iVZERdHTgVdf_KVQYOMXQRR^QHM^
      username cisco privilege 15 password 6 Y]i`\ZegLUiB[EMPYUAKhOBK]VRAAB
      username newuser password 6 _Ab[PDCO[fQDJhDfMIciONMedifAAB
      username newuser2 password 6 XTXfOVUcYDZKd`FBH\S]XEJ_FcIAAB

      Note that we do not have entries for `admin` or `cisco`, because
      these values were set directly on NSO and not on the device, we
      do not have a corresponding plaintext value and they are handled
      entirely as encrypted values.

    --- Auto-encrypting passwords in NSO

    To avoid having to pre-encrypt your passwords you can rebuild your NED with an encrypted type for secrets using
    a command like `NEDCOM_SECRET_TYPE="tailf:aes-cfb-128-encrypted-string" make -C
    src/` or by setting `NED_EXTRA_BUILDFLAGS ?=NEDCOM_SECRET_TYPE=tailf:aes-cfb-128-encrypted-string `
    in the `Makefile`. Doing this means that even if the input to a password
    is a plaintext string, NSO will always encrypt it, and you will never see
    plain text secrets in the device tree.

    If we reload our example with the new NED all of the secrets are now encrypted:

    admin@ncs# show running-config devices device ios0 config username
    devices device ios0
     config
       username admin password 6 $8$LkeTpiWvR2fm0P0DK0FXPg61LAOw5TACkB1y7FYvZIYYNE2CqMyQOwZ7uDeod7oR
       username cisco privilege 15 password 6 $8$0D4JYVCvfoLqu5u77OImrdzWuP4hp9HzcAXbQPAoQUmNNWjF0VoOPVeaPRfoRqrI
       username newuser password 0 $8$IpJZaKg3HZ+7JMdhmcVlbdw2P+htNdThDuYKdldDAqM=
       username newuser2 password 0 "$8$BVzY1FLE47Wum5WXokAVZ3UqaeJQt4s7ksGyiWKOLxGZIUrhp92KqBG4R2zINyMFl+L71TOk\naT8u3/l4L/p4Xg=="
     !
    !

    and if we create yet another user we get the desired result:

    admin@ncs(config)# devices device ios0 config username newuser3 password 0 MY-AUTO-PASSWD
    admin@ncs(config-config)# commit dry-run outformat native
    native {
        device {
           name ios0
           data username newuser3 password 0 $8$s3EN60QdR5flGa1cv0K3/50iHX4wBcRkjrhFaok7ALg=
    }

    admin@ncs(config-config)# commit
    Commit complete.
    admin@ncs(config-config)# end
    admin@ncs# show running-config devices device ios0 config username newuser3
    devices device ios0
     config
       username newuser3 password 0 $8$s3EN60QdR5flGa1cv0K3/50iHX4wBcRkjrhFaok7ALg=
     !
    !

    admin@ncs# show devices device ios0 ned-settings secrets
    ID                                      ENCRYPTED                               REGEX
    ---------------------------------------------------------------------------------------
    ios:username(newuser)/password/secret   6 _Ab[PDCO[fQDJhDfMIciONMedifAAB
    ios:username(newuser2)/password/secret  6 XTXfOVUcYDZKd`FBH\S]XEJ_FcIAAB
    ios:username(newuser3)/password/secret  6 QFVNW\__Pc[gDG_Fi_ccEQQWHA[DIHJhTAAB


15. Reporting Feature Request or Problem (technical info only)
------------------------------------------------------------------

    For all tickets, regardless whether it is a problem report or
    feature request, a raw trace from a real device is MANDATORY.

    (1) To enable raw trace globally, set and commit:

         admin@ncs(config)# devices global-settings trace raw
         admin@ncs(config)# commit

    (2) Next, clear the trace in order to minimize the information.

         admin@ncs(config)# devices clear-trace

    Once those two steps are done, the steps differ depending on the issue:


    --- For Feature Requests do:

    (3f) Set the config you want implemented on a real IOS device,
         including all existing dependent config.

    (4f) admin@ncs(config)# devices device <devname> sync-from [verbose]

    (5f) Attach the raw trace to the ticket.

    (6f) List the config you want implemented in the same syntax as
         shown on the device, i.e. in IOS CLI format.


    --- For Problems Reports do:

    (3p) Write a general summary of the issue and the minimum steps
         required to reproduce it.

    (4p) Start with a compare-config to populate the trace with
         initial device config:

         admin@ncs(config)# devices device <devname> compare-config

    (5p) Run the service or manually configure minimum amount of
         config to reproduce the issue. Show the change in CLI format
         before commit:

         admin@ncs(config)# commit dry-run outformat native

    (6p) Commit the change causing a problem:

         admin@ncs(config)# commit

    (7p) Login to the real device using SSH|TELNET and show how the
         commit should have looked manually. This is essential so we
         can see how a successful commit should have looked.

    (8p) If the commit succeeds but the problem is a compare-config or
         out of sync issue, then end with a 2nd compare-config:

         admin@ncs(config)# devices device <devname> compare-config

    (9p) Attach the raw trace to the ticket.


15. END OF README FILE
----------------------
